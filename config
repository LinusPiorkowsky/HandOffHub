# requirements.txt
Flask==3.0.0
Flask-SQLAlchemy==3.1.1
Flask-Login==0.6.3
Flask-WTF==1.2.1
Flask-Mail==0.9.1
WTForms==3.1.1
email-validator==2.1.0
python-dotenv==1.0.0
gunicorn==21.2.0
psycopg2-binary==2.9.9

# .env (Example - create your own with real values)
SECRET_KEY=your-secret-key-here-change-this
DATABASE_URL=postgresql://user:password@localhost/handoffhub
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
MAIL_DEFAULT_SENDER=noreply@handoffhub.com

# docker-compose.yml
version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://handoff:handoff123@db:5432/handoffhub
      - FLASK_APP=app.py
      - FLASK_ENV=development
    volumes:
      - .:/app
    depends_on:
      - db
    command: flask run --host=0.0.0.0

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=handoff
      - POSTGRES_PASSWORD=handoff123
      - POSTGRES_DB=handoffhub
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    ports:
      - "6379:6379"

volumes:
  postgres_data:

# Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create templates directory structure
RUN mkdir -p templates static

# Run the application
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]

# railway.toml (for Railway deployment)
[build]
builder = "NIXPACKS"

[deploy]
startCommand = "gunicorn app:app --bind 0.0.0.0:$PORT"
healthcheckPath = "/"
healthcheckTimeout = 100
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10

# Procfile (for Render/Heroku)
web: gunicorn app:app

# .gitignore
*.pyc
__pycache__/
instance/
.env
*.db
venv/
env/
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# README.md
# HandoffHub - Inter-departmental Handoff Tracking

Never drop the ball between teams again. Track every handoff, eliminate bottlenecks, boost accountability.

## Features

- üöÄ Simple handoff creation in seconds
- üìß Instant email notifications
- üìä Real-time dashboard with metrics
- üí¨ Comments and status updates
- ‚è∞ Deadline tracking and overdue alerts
- üë• Team-based organization

## Quick Start

### Local Development

1. Clone the repository:
```bash
git clone https://github.com/yourusername/handoffhub.git
cd handoffhub
```

2. Create virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your settings
```

5. Initialize database:
```bash
flask init-db
flask create-sample-data  # Optional: creates test data
```

6. Run the application:
```bash
flask run
```

Visit http://localhost:5000

### Docker Development

```bash
docker-compose up
```

Visit http://localhost:5000

## Deployment

### Railway

1. Connect your GitHub repo to Railway
2. Add environment variables in Railway dashboard
3. Deploy!

### Render

1. Connect GitHub repo to Render
2. Choose "Web Service"
3. Add environment variables
4. Deploy!

## Default Test Accounts

If you run `flask create-sample-data`:
- alice@example.com / password123 (Sales team)
- bob@example.com / password123 (Marketing team)
- charlie@example.com / password123 (Development team)
- diana@example.com / password123 (Support team)

## Tech Stack

- **Backend**: Flask, SQLAlchemy, Flask-Login
- **Frontend**: HTMX, Alpine.js, Tailwind CSS
- **Database**: PostgreSQL (or SQLite for development)
- **Email**: Flask-Mail with SMTP
- **Deployment**: Railway, Render, or any PaaS

## License

MIT

## Support

For questions or issues, contact: support@handoffhub.com
